{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar _ = require('lodash');\n\nvar HttpError = require('./HttpError');\n\nvar helpers = require('./../helpers');\n/**\n * Base RestError class. inherits from WError.\n * Variadic signature, first two are special to Restify, using a opts obj.\n * 1) new RestError(anotherErr, {...});\n * 2) new RestError({...});\n * Last one is a straight pass through to WError\n * 3) new RestError('my special error message');\n * @public\n * @class\n */\n\n\nfunction RestError() {\n  var self = this;\n  var parsed = helpers.parseVErrorArgs(arguments);\n  var opts = parsed.internalOpts; // call super\n\n  HttpError.apply(self, _.toArray(arguments));\n  /**\n   * a bit of a misnomer, not really an http code, but rather the name\n   * of the error. the equivalent of HttpCode's `code` property.\n   * TODO: Not sure why the default here is 'Error' and not 'RestError'?\n   * only set the value if it doesnt already exist, as it's defined on the\n   * prototype for subclasses.\n   * @property\n   * @type {String}\n   */\n\n  if (opts.restCode) {\n    self.restCode = opts.restCode;\n  }\n  /**\n   * an object used to render the error when passed\n   * to res.send()\n   * @property\n   * @type {Object}\n   */\n\n\n  self.body = {\n    // err.code/err.restCode is used by legacy restify paths, probably\n    // originally created to emulate the code property that is created by\n    // some native core module errors (i.e., a failed fs.readFile will\n    // return a ENOENT error with a err.code of ENOENT).\n    //\n    // for Http/RestErrors, the code will be the error name but with\n    // 'error' truncated from the string. i.e., if the error name is\n    // InternalServerError, the code is InternalServer.\n    code: opts.restCode || self.restCode,\n    message: self.message || ''\n  };\n}\n\nutil.inherits(RestError, HttpError);\n/**\n * assign non-standard display name property on the CONSTRUCTOR (not prototype),\n * which is supported by all VMs. useful for stack trace output.\n * @type {String}\n */\n\nRestError.displayName = 'RestError';\n/**\n * the name of the error, used in the stack trace output\n * @type {String}\n */\n\nRestError.prototype.name = 'RestError';\n/**\n * the default rest code. i.e., a BadDigestError has a restCode of 'BadDigest'.\n * @type {String}\n */\n\nRestError.prototype.restCode = 'Error';\nmodule.exports = RestError;","map":null,"metadata":{},"sourceType":"script"}