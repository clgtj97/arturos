{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict'; // core modules\n\nvar http = require('http');\n\nvar util = require('util'); // external modules\n\n\nvar _ = require('lodash'); // local files\n\n\nvar helpers = require('./helpers');\n\nvar HttpError = require('./baseClasses/HttpError'); // Programatically create 4xx and 5xx HTTP status codes Error classes\n// This list includes:\n// BadRequestError\n// UnauthorizedError\n// PaymentRequiredError\n// ForbiddenError\n// NotFoundError\n// MethodNotAllowedError\n// NotAcceptableError\n// ProxyAuthenticationRequiredError\n// RequestTimeoutError\n// ConflictError\n// GoneError\n// LengthRequiredError\n// PreconditionFailedError\n// RequestEntityTooLargeError\n// RequesturiTooLargeError\n// UnsupportedMediaTypeError\n// RangeNotSatisfiableError (For Node >= 4 & iojs >= 3)\n// RequestedRangeNotSatisfiableError (For Node 0.x & iojs < 3)\n// ExpectationFailedError\n// ImATeapotError\n// UnprocessableEntityError\n// LockedError\n// FailedDependencyError\n// UnorderedCollectionError\n// UpgradeRequiredError\n// PreconditionRequiredError\n// TooManyRequestsError\n// RequestHeaderFieldsTooLargeError\n// InternalServerError\n// NotImplementedError\n// BadGatewayError\n// ServiceUnavailableError\n// GatewayTimeoutError\n// HttpVersionNotSupportedError\n// VariantAlsoNegotiatesError\n// InsufficientStorageError\n// BandwidthLimitExceededError\n// NotExtendedError\n// NetworkAuthenticationRequiredError\n\n\nvar httpErrors = _.reduce(http.STATUS_CODES, function (acc, desc, code) {\n  var parsedCode = parseInt(code, 10);\n\n  if (parsedCode >= 400) {\n    var name = helpers.errNameFromDesc(desc); // this is a dynamic constructor for an error message.\n    // arguments are variadic. constructor fn name must be anonymous.\n\n    /**\n     * Variadic signature, first two are special to Restify, using a\n     * options obj.\n     * 1) new [Dynamic]Error(anotherErr, {...});\n     * 2) new [Dynamic]Error({...});\n     * Last one is a straight pass through to WError\n     * 3) new [Dynamic]Error('my special error message');\n     * @public\n     * @class\n     */\n\n    acc[name] = function () {\n      // call super\n      HttpError.apply(this, arguments);\n    };\n\n    util.inherits(acc[name], HttpError);\n    /**\n     * assign non-standard display name property on the CONSTRUCTOR (not\n     * prototype), which is supported by all VMs. useful for stack trace\n     * output.\n     * @type {String}\n     */\n\n    acc[name].displayName = name;\n    /**\n     * the name of the error, used in the stack trace output\n     * @type {String}\n     */\n\n    acc[name].prototype.name = name;\n    /**\n     * assign a default status code based on core http module.\n     * users can override this if they want to. HttpError constructor\n     * will handle overriding at the instance level.\n     * @type {Number}\n     */\n\n    acc[name].prototype.statusCode = parsedCode;\n    /**\n     * default code is the error name\n     * @type {String}\n     */\n\n    acc[name].prototype.code = name.replace(new RegExp('Error$'), '');\n  }\n\n  return acc;\n}, {});\n\nmodule.exports = httpErrors;","map":null,"metadata":{},"sourceType":"script"}