{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n\nvar assert = require('assert-plus');\n\nvar errors = require('restify-errors');\n\nvar bunyan = require('./bunyan_helper');\n\nvar Router = require('./router');\n\nvar Server = require('./server');\n\nvar shallowCopy = require('./utils').shallowCopy;\n\nvar InternalError = errors.InternalError;\n/**\n * A restify server object is the main interface through which you will register\n * routes and handlers for incoming requests.\n *\n * @public\n * @function createServer\n * @param {Object} [options]  - an options object\n * @param {String} [options.name=\"restify\"] - Name of the server.\n * @param {Boolean} [options.dtrace=false] - enable DTrace support\n * @param {Router} [options.router=new Router(opts)] - Router\n * @param {Object} [options.log=bunyan.createLogger(options.name || \"restify\")]\n * - [bunyan](https://github.com/trentm/node-bunyan) instance.\n * @param {String} [options.url] - Once listen() is called, this will be filled\n * in with where the server is running.\n * @param {String|Buffer} [options.certificate] - If you want to create an HTTPS\n * server, pass in a PEM-encoded certificate and key.\n * @param {String|Buffer} [options.key] - If you want to create an HTTPS server,\n * pass in a PEM-encoded certificate and key.\n * @param {Object} [options.formatters] - Custom response formatters for\n * `res.send()`.\n * @param {Boolean} [options.handleUncaughtExceptions=false] - When true restify\n * will use a domain to catch and respond to any uncaught\n * exceptions that occur in it's handler stack.\n * [bunyan](https://github.com/trentm/node-bunyan) instance.\n * response header, default is `restify`. Pass empty string to unset the header.\n * Comes with significant negative performance impact.\n * @param {Object} [options.spdy] - Any options accepted by\n * [node-spdy](https://github.com/indutny/node-spdy).\n * @param {Object} [options.http2] - Any options accepted by\n * [http2.createSecureServer](https://nodejs.org/api/http2.html).\n * @param {Boolean} [options.handleUpgrades=false] - Hook the `upgrade` event\n * from the node HTTP server, pushing `Connection: Upgrade` requests through the\n *  regular request handling chain.\n * @param {Boolean} [options.onceNext=false] - Prevents calling next multiple\n *  times\n * @param {Boolean} [options.strictNext=false] - Throws error when next() is\n *  called more than once, enabled onceNext option\n * @param {Object} [options.httpsServerOptions] - Any options accepted by\n * [node-https Server](http://nodejs.org/api/https.html#https_https).\n * If provided the following restify server options will be ignored:\n * spdy, ca, certificate, key, passphrase, rejectUnauthorized, requestCert and\n * ciphers; however these can all be specified on httpsServerOptions.\n * @param {Boolean} [options.noWriteContinue=false] - prevents\n *  `res.writeContinue()` in `server.on('checkContinue')` when proxing\n * @param {Boolean} [options.ignoreTrailingSlash=false] - ignore trailing slash\n * on paths\n * @param {Boolean} [options.strictFormatters=true] - enables strict formatters\n * behavior: a formatter matching the response's content-type is required. If\n * not found, the response's content-type is automatically set to\n * 'application/octet-stream'. If a formatter for that content-type is not\n * found, sending the response errors.\n * @example\n * var restify = require('restify');\n * var server = restify.createServer();\n *\n * server.listen(8080, function () {\n *   console.log('ready on %s', server.url);\n * });\n * @returns  {Server} server\n */\n\nfunction createServer(options) {\n  assert.optionalObject(options, 'options');\n  var opts = shallowCopy(options || {});\n  var server; // empty string should override default value.\n\n  opts.name = opts.hasOwnProperty('name') ? opts.name : 'restify';\n  opts.log = opts.log || bunyan.createLogger(opts.name || 'restify');\n  opts.router = opts.router || new Router(opts);\n  server = new Server(opts);\n\n  if (opts.handleUncaughtExceptions) {\n    server.on('uncaughtException', function onUncaughtException(req, res, route, e) {\n      if (this.listeners('uncaughtException').length > 1 || res.headersSent) {\n        return false;\n      }\n\n      res.send(new InternalError(e, e.message || 'unexpected error'));\n      return true;\n    });\n  }\n\n  return server;\n} ///--- Exports\n\n\nmodule.exports.bunyan = bunyan;\nmodule.exports.createServer = createServer;\nmodule.exports.formatters = require('./formatters');\nmodule.exports.plugins = require('./plugins');\nmodule.exports.pre = require('./plugins').pre;\nmodule.exports.helpers = {\n  compose: require('./helpers/chainComposer')\n};","map":null,"metadata":{},"sourceType":"script"}