{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar http = require('http');\n\nvar Handlers = buildHandlers();\nvar types = {\n  STATIC: 0,\n  PARAM: 1,\n  MATCH_ALL: 2,\n  REGEX: 3,\n  // It's used for a parameter, that is followed by another parameter in the same part\n  MULTI_PARAM: 4\n};\n\nfunction Node(options) {\n  // former arguments order: prefix, children, kind, handlers, regex, versions\n  options = options || {};\n  this.prefix = options.prefix || '/';\n  this.label = this.prefix[0];\n  this.children = options.children || {};\n  this.numberOfChildren = Object.keys(this.children).length;\n  this.kind = options.kind || this.types.STATIC;\n  this.handlers = new Handlers(options.handlers);\n  this.regex = options.regex || null;\n  this.wildcardChild = null;\n  this.parametricBrother = null;\n  this.versions = options.versions;\n}\n\nObject.defineProperty(Node.prototype, 'types', {\n  value: types\n});\n\nNode.prototype.getLabel = function () {\n  return this.prefix[0];\n};\n\nNode.prototype.addChild = function (node) {\n  var _this = this;\n\n  var label = '';\n\n  switch (node.kind) {\n    case this.types.STATIC:\n      label = node.getLabel();\n      break;\n\n    case this.types.PARAM:\n    case this.types.REGEX:\n    case this.types.MULTI_PARAM:\n      label = ':';\n      break;\n\n    case this.types.MATCH_ALL:\n      this.wildcardChild = node;\n      label = '*';\n      break;\n\n    default:\n      throw new Error(\"Unknown node kind: \".concat(node.kind));\n  }\n\n  assert(this.children[label] === undefined, \"There is already a child with label '\".concat(label, \"'\"));\n  this.children[label] = node;\n  this.numberOfChildren = Object.keys(this.children).length;\n  var labels = Object.keys(this.children);\n  var parametricBrother = this.parametricBrother;\n\n  for (var i = 0; i < labels.length; i++) {\n    var child = this.children[labels[i]];\n\n    if (child.label === ':') {\n      parametricBrother = child;\n      break;\n    }\n  } // Save the parametric brother inside static children\n\n\n  var iterate = function iterate(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.kind !== _this.types.STATIC) {\n      return;\n    }\n\n    if (node !== _this) {\n      node.parametricBrother = parametricBrother || node.parametricBrother;\n    }\n\n    var labels = Object.keys(node.children);\n\n    for (var i = 0; i < labels.length; i++) {\n      iterate(node.children[labels[i]]);\n    }\n  };\n\n  iterate(this);\n  return this;\n};\n\nNode.prototype.reset = function (prefix, versions) {\n  this.prefix = prefix;\n  this.children = {};\n  this.kind = this.types.STATIC;\n  this.handlers = new Handlers();\n  this.numberOfChildren = 0;\n  this.regex = null;\n  this.wildcardChild = null;\n  this.versions = versions;\n  return this;\n};\n\nNode.prototype.findByLabel = function (path) {\n  return this.children[path[0]];\n};\n\nNode.prototype.findChild = function (path, method) {\n  var child = this.children[path[0]];\n\n  if (child !== undefined && (child.numberOfChildren > 0 || child.handlers[method] !== null)) {\n    if (path.slice(0, child.prefix.length) === child.prefix) {\n      return child;\n    }\n  }\n\n  child = this.children[':'] || this.children['*'];\n\n  if (child !== undefined && (child.numberOfChildren > 0 || child.handlers[method] !== null)) {\n    return child;\n  }\n\n  return null;\n};\n\nNode.prototype.findVersionChild = function (version, path, method) {\n  var child = this.children[path[0]];\n\n  if (child !== undefined && (child.numberOfChildren > 0 || child.getVersionHandler(version, method) !== null)) {\n    if (path.slice(0, child.prefix.length) === child.prefix) {\n      return child;\n    }\n  }\n\n  child = this.children[':'] || this.children['*'];\n\n  if (child !== undefined && (child.numberOfChildren > 0 || child.getVersionHandler(version, method) !== null)) {\n    return child;\n  }\n\n  return null;\n};\n\nNode.prototype.setHandler = function (method, handler, params, store) {\n  if (!handler) return;\n  assert(this.handlers[method] !== undefined, \"There is already an handler with method '\".concat(method, \"'\"));\n  this.handlers[method] = {\n    handler: handler,\n    params: params,\n    store: store || null,\n    paramsLength: params.length\n  };\n};\n\nNode.prototype.setVersionHandler = function (version, method, handler, params, store) {\n  if (!handler) return;\n  var handlers = this.versions.get(version) || new Handlers();\n  assert(handlers[method] === null, \"There is already an handler with version '\".concat(version, \"' and method '\").concat(method, \"'\"));\n  handlers[method] = {\n    handler: handler,\n    params: params,\n    store: store || null,\n    paramsLength: params.length\n  };\n  this.versions.set(version, handlers);\n};\n\nNode.prototype.getHandler = function (method) {\n  return this.handlers[method];\n};\n\nNode.prototype.getVersionHandler = function (version, method) {\n  var handlers = this.versions.get(version);\n  return handlers === null ? handlers : handlers[method];\n};\n\nNode.prototype.prettyPrint = function (prefix, tail) {\n  var _this2 = this;\n\n  var paramName = '';\n  var handlers = this.handlers || {};\n  var methods = Object.keys(handlers).filter(function (method) {\n    return handlers[method] && handlers[method].handler;\n  });\n\n  if (this.prefix === ':') {\n    methods.forEach(function (method, index) {\n      var params = _this2.handlers[method].params;\n      var param = params[params.length - 1];\n\n      if (methods.length > 1) {\n        if (index === 0) {\n          paramName += param + \" (\".concat(method, \")\\n\");\n          return;\n        }\n\n        paramName += '    ' + prefix + ':' + param + \" (\".concat(method, \")\");\n        paramName += index === methods.length - 1 ? '' : '\\n';\n      } else {\n        paramName = params[params.length - 1] + \" (\".concat(method, \")\");\n      }\n    });\n  } else if (methods.length) {\n    paramName = \" (\".concat(methods.join('|'), \")\");\n  }\n\n  var tree = \"\".concat(prefix).concat(tail ? '└── ' : '├── ').concat(this.prefix).concat(paramName, \"\\n\");\n  prefix = \"\".concat(prefix).concat(tail ? '    ' : '│   ');\n  var labels = Object.keys(this.children);\n\n  for (var i = 0; i < labels.length - 1; i++) {\n    tree += this.children[labels[i]].prettyPrint(prefix, false);\n  }\n\n  if (labels.length > 0) {\n    tree += this.children[labels[labels.length - 1]].prettyPrint(prefix, true);\n  }\n\n  return tree;\n};\n\nfunction buildHandlers(handlers) {\n  var code = \"handlers = handlers || {}\\n  \";\n\n  for (var i = 0; i < http.METHODS.length; i++) {\n    var m = http.METHODS[i];\n    code += \"this['\".concat(m, \"'] = handlers['\").concat(m, \"'] || null\\n    \");\n  }\n\n  return new Function('handlers', code); // eslint-disable-line\n}\n\nmodule.exports = Node;\nmodule.exports.Handlers = Handlers;","map":null,"metadata":{},"sourceType":"script"}