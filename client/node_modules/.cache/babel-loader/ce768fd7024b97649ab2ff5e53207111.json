{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n\nvar qs = require('qs');\n\nvar assert = require('assert-plus');\n/**\n * Parses the HTTP query string (i.e., `/foo?id=bar&name=mark`).\n * If you use this, the parsed content will always be available in `req.query`,\n * additionally params are merged into `req.params`.\n * You can disable by passing in `mapParams: false` in the options object.\n *\n * Many options correspond directly to option defined for the underlying\n * [`qs.parse`](https://github.com/ljharb/qs).\n *\n * @public\n * @function queryParser\n * @param    {Object}   [options] - an options object\n * @param    {Object}   [options.mapParams=true] - disable passing\n * @param {Boolean} [options.mapParams=false] - Copies parsed query parameters\n * into`req.params`.\n * @param {Boolean} [options.overrideParams=false] - Only applies when if\n * mapParams true.\n * When true, will stomp on req.params field when existing value is found.\n * @param {Boolean} [options.allowDots=false] - Transform `?foo.bar=baz` to a\n * nested object: `{foo: {bar: 'baz'}}`.\n * @param {Number} [options.arrayLimit=20] - Only transform `?a[$index]=b`\n * to an array if `$index` is less than `arrayLimit`.\n * @param {Number} [options.depth=5] - The depth limit for parsing\n * nested objects, e.g. `?a[b][c][d][e][f][g][h][i]=j`.\n * @param {Number} [options.parameterLimit=1000] - Maximum number of query\n * params parsed. Additional params are silently dropped.\n * @param {Boolean} [options.parseArrays=true] - Whether to parse\n * `?a[]=b&a[1]=c` to an array, e.g. `{a: ['b', 'c']}`.\n * @param {Boolean} [options.plainObjects=false] - Whether `req.query` is a\n * \"plain\" object -- does not inherit from `Object`.\n * This can be used to allow query params whose names collide with Object\n * methods, e.g. `?hasOwnProperty=blah`.\n * @param {Boolean} [options.strictNullHandling=false] - If true, `?a&b=`\n * results in `{a: null, b: ''}`. Otherwise, `{a: '', b: ''}`.\n * @returns  {Function} Handler\n * @example\n * server.use(restify.plugins.queryParser({ mapParams: false }));\n */\n\n\nfunction queryParser(options) {\n  var opts = options || {};\n  assert.object(opts, 'opts');\n\n  function parseQueryString(req, res, next) {\n    if (!req.getQuery()) {\n      req.query = {};\n      return next();\n    }\n\n    req.query = qs.parse(req.getQuery(), opts);\n\n    if (opts.mapParams === true) {\n      Object.keys(req.query).forEach(function forEach(k) {\n        if (req.params[k] && !opts.overrideParams) {\n          return;\n        }\n\n        req.params[k] = req.query[k];\n      });\n    }\n\n    return next();\n  }\n\n  return parseQueryString;\n}\n\nmodule.exports = queryParser;","map":null,"metadata":{},"sourceType":"script"}