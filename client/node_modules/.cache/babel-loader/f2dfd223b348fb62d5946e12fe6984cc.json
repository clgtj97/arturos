{"ast":null,"code":"'use strict'; // core modules\n\nvar util = require('util'); // external modules\n\n\nvar _ = require('lodash');\n\nvar assert = require('assert-plus'); // local files\n\n\nvar RestError = require('./baseClasses/RestError');\n/**\n * create RestError subclasses for users. takes a string, creates a\n * constructor for them. magicks, again.\n * @public\n * @function makeConstructor\n * @param {String} name the name of the error class to create\n * @param {Number} defaults optional status code\n * @return {Function} a constructor function\n */\n\n\nfunction makeConstructor(name, defaults) {\n  assert.string(name, 'name');\n  assert.optionalObject(defaults, 'defaults'); // code property doesn't have 'Error' in it. remove it.\n\n  var defaultCode = name.replace(new RegExp('[Ee]rror$'), '');\n\n  var prototypeDefaults = _.assign({}, {\n    name: name,\n    code: defaults && defaults.code || defaultCode,\n    restCode: _.get(defaults, 'restCode', defaultCode)\n  }, defaults); // assert that this constructor doesn't already exist.\n\n\n  assert.equal(typeof module.exports[name], 'undefined', 'Constructor already exists!'); // dynamically create a constructor.\n  // must be anonymous fn.\n\n  var ErrCtor = function ErrCtor() {\n    // eslint-disable-line require-jsdoc, func-style\n    // call super\n    RestError.apply(this, arguments);\n    this.name = name;\n  };\n\n  util.inherits(ErrCtor, RestError); // copy over all options to prototype\n\n  _.assign(ErrCtor.prototype, prototypeDefaults); // assign display name\n\n\n  ErrCtor.displayName = name; // return constructor to user, they can choose how to store and manage it.\n\n  return ErrCtor;\n}\n\nmodule.exports = makeConstructor;","map":null,"metadata":{},"sourceType":"script"}