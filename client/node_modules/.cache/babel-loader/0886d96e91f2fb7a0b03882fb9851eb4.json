{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar escapeRE = require('escape-regexp-component');\n\nvar assert = require('assert-plus');\n\nvar mime = require('mime');\n\nvar errors = require('restify-errors'); ///--- Globals\n\n\nvar MethodNotAllowedError = errors.MethodNotAllowedError;\nvar NotAuthorizedError = errors.NotAuthorizedError;\nvar ResourceNotFoundError = errors.ResourceNotFoundError; ///--- Functions\n\n/**\n * Serves static files.\n *\n * @public\n * @function serveStatic\n * @param    {Object} options - an options object\n * @throws   {MethodNotAllowedError} |\n * @throws   {NotAuthorizedError}\n * @throws   {ResourceNotFoundError}\n * @returns  {Function} Handler\n * @example\n * <caption>\n * The serveStatic module is different than most of the other plugins, in that\n * it is expected that you are going to map it to a route, as below:\n * </caption>\n * server.get('/docs/current/*', restify.plugins.serveStatic({\n *   directory: './documentation/v1',\n *   default: 'index.html'\n * }));\n * @example\n * <caption>\n * The above `route` and `directory` combination will serve a file located in\n * `./documentation/v1/docs/current/index.html` when you attempt to hit\n * `http://localhost:8080/docs/current/`. If you want the serveStatic module to\n * serve files directly from the `/documentation/v1` directory\n * (and not append the request path `/docs/current/`),\n * you can set the `appendRequestPath` option to `false`, and the served file\n * would be `./documentation/v1/index.html`, in the previous example.\n *\n * The plugin will enforce that all files under `directory` are served.\n * The `directory` served is relative to the process working directory.\n * You can also provide a `default` parameter such as index.html for any\n * directory that lacks a direct file match.\n * You can specify additional restrictions by passing in a `match` parameter,\n * which is just a `RegExp` to check against the requested file name.\n * Additionally, you may set the `charSet` parameter, which will append a\n * character set to the content-type detected by the plugin.\n * For example, `charSet: 'utf-8'` will result in HTML being served with a\n * `Content-Type` of `text/html; charset=utf-8`.\n * Lastly, you can pass in a `maxAge` numeric, which will set the\n * `Cache-Control` header. Default is `3600` (1 hour).\n *\n * An additional option for serving a static file is to pass `file` in to the\n * serveStatic method as an option. The following will serve index.html from\n * the documentation/v1/ directory anytime a client requests `/home/`.\n * </caption>\n * server.get('/home/*', restify.plugins.serveStatic({\n *   directory: './documentation/v1',\n *   file: 'index.html'\n * }));\n * // or\n * server.get('/home/([a-z]+[.]html)', restify.plugins.serveStatic({\n *   directory: './documentation/v1',\n *   file: 'index.html'\n * }));\n */\n\nfunction serveStatic(options) {\n  var opts = options || {};\n\n  if (typeof opts.appendRequestPath === 'undefined') {\n    opts.appendRequestPath = true;\n  }\n\n  assert.object(opts, 'options');\n  assert.string(opts.directory, 'options.directory');\n  assert.optionalNumber(opts.maxAge, 'options.maxAge');\n  assert.optionalObject(opts.match, 'options.match');\n  assert.optionalString(opts.charSet, 'options.charSet');\n  assert.optionalString(opts.file, 'options.file');\n  assert.bool(opts.appendRequestPath, 'options.appendRequestPath');\n  var p = path.normalize(opts.directory).replace(/\\\\/g, '/');\n  var re = new RegExp('^' + escapeRE(p) + '/?.*');\n\n  function serveFileFromStats(file, err, stats, isGzip, req, res, next) {\n    if (typeof req.closed === 'function' && req.closed()) {\n      next(false);\n      return;\n    }\n\n    if (err) {\n      next(new ResourceNotFoundError(err, '%s', req.path()));\n      return;\n    } else if (!stats.isFile()) {\n      next(new ResourceNotFoundError('%s does not exist', req.path()));\n      return;\n    }\n\n    if (res.handledGzip && isGzip) {\n      res.handledGzip();\n    }\n\n    var fstream = fs.createReadStream(file + (isGzip ? '.gz' : ''));\n    var maxAge = opts.maxAge === undefined ? 3600 : opts.maxAge;\n    fstream.once('open', function onceOpen(fd) {\n      res.cache({\n        maxAge: maxAge\n      });\n      res.set('Content-Length', stats.size);\n      res.set('Content-Type', mime.getType(file));\n      res.set('Last-Modified', stats.mtime);\n\n      if (opts.charSet) {\n        var type = res.getHeader('Content-Type') + '; charset=' + opts.charSet;\n        res.setHeader('Content-Type', type);\n      }\n\n      if (opts.etag) {\n        res.set('ETag', opts.etag(stats, opts));\n      }\n\n      res.writeHead(200);\n      fstream.pipe(res);\n      fstream.once('close', function onceClose() {\n        next(false);\n      });\n    });\n    res.once('close', function onceClose() {\n      fstream.close();\n    });\n  }\n\n  function serveNormal(file, req, res, next) {\n    fs.stat(file, function fileStat(err, stats) {\n      if (!err && stats.isDirectory() && opts.default) {\n        // Serve an index.html page or similar\n        var filePath = path.join(file, opts.default);\n        fs.stat(filePath, function dirStat(dirErr, dirStats) {\n          serveFileFromStats(filePath, dirErr, dirStats, false, req, res, next);\n        });\n      } else {\n        serveFileFromStats(file, err, stats, false, req, res, next);\n      }\n    });\n  }\n\n  function serve(req, res, next) {\n    var file;\n\n    if (opts.file) {\n      //serves a direct file\n      file = path.join(opts.directory, decodeURIComponent(opts.file));\n    } else if (opts.appendRequestPath) {\n      file = path.join(opts.directory, decodeURIComponent(req.path()));\n    } else {\n      var dirBasename = path.basename(opts.directory);\n      var reqpathBasename = path.basename(req.path());\n\n      if (path.extname(req.path()) === '' && dirBasename === reqpathBasename) {\n        file = opts.directory;\n      } else {\n        file = path.join(opts.directory, decodeURIComponent(path.basename(req.path())));\n      }\n    }\n\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      next(new MethodNotAllowedError('%s', req.method));\n      return;\n    }\n\n    if (!re.test(file.replace(/\\\\/g, '/'))) {\n      next(new NotAuthorizedError('%s', req.path()));\n      return;\n    }\n\n    if (opts.match && !opts.match.test(file)) {\n      next(new NotAuthorizedError('%s', req.path()));\n      return;\n    }\n\n    if (opts.gzip && req.acceptsEncoding('gzip')) {\n      fs.stat(file + '.gz', function stat(err, stats) {\n        if (!err) {\n          res.setHeader('Content-Encoding', 'gzip');\n          serveFileFromStats(file, err, stats, true, req, res, next);\n        } else {\n          serveNormal(file, req, res, next);\n        }\n      });\n    } else {\n      serveNormal(file, req, res, next);\n    }\n  }\n\n  return serve;\n}\n\nmodule.exports = serveStatic;","map":null,"metadata":{},"sourceType":"script"}