{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n/**\n * Return a shallow copy of the given object;\n *\n * @public\n * @function  shallowCopy\n * @param   {Object} obj - the object to copy\n * @returns {Object}     the new copy of the object\n */\n\nfunction shallowCopy(obj) {\n  if (!obj) {\n    return obj;\n  }\n\n  var copy = {};\n  Object.keys(obj).forEach(function forEach(k) {\n    copy[k] = obj[k];\n  });\n  return copy;\n}\n/**\n * Merges two query parameter objects. Merges to array\n * if the same key is encountered.\n *\n * @public\n * @function  mergeQs\n * @param   {Object} obj1 - first qs object\n * @param   {Object} obj2 - second qs object\n * @returns {Object}        the merged object\n */\n\n\nfunction mergeQs(obj1, obj2) {\n  var merged = shallowCopy(obj1) || {}; // defend against null cause null is an object. yay js.\n\n  if (obj2 && typeof obj2 === 'object') {\n    Object.keys(obj2).forEach(function forEach(key) {\n      // if we already have this key and it isn't an array,\n      // make it one array of the same element.\n      if (merged.hasOwnProperty(key) && !(merged[key] instanceof Array)) {\n        merged[key] = [merged[key]]; // push the new value down\n\n        merged[key].push(obj2[key]);\n      } else {\n        // otherwise just set it\n        merged[key] = obj2[key];\n      }\n    });\n  }\n\n  return merged;\n} ///--- Exports\n\n\nmodule.exports = {\n  shallowCopy: shallowCopy,\n  mergeQs: mergeQs\n};","map":null,"metadata":{},"sourceType":"script"}