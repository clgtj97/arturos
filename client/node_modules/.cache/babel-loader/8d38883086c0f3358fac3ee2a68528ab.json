{"ast":null,"code":"'use strict';\n\nvar assert = require('assert-plus');\n\nvar once = require('once');\n\nmodule.exports = Chain;\n/**\n * Create a new middleware chain\n *\n * @public\n * @class Chain\n * @param {Object} [options] - options\n * @param {Boolean} [options.onceNext=false] - Prevents calling next multiple\n *  times\n * @param {Boolean} [options.strictNext=false] - Throws error when next() is\n *  called more than once, enables onceNext option\n * @example\n * var chain = new Chain();\n * chain.add(function (req, res, next) { next(); })\n * // chain.add(function (req, res, next) { next(new Error('Foo')); })\n * // chain.add(function (req, res, next) { next(false); })\n *\n * http.createServer((req, res) => {\n *    chain.run(req, res, function done(err) {\n *       res.end(err ? err.message : 'hello world');\n *    });\n * })\n */\n\nfunction Chain(options) {\n  assert.optionalObject(options, 'options');\n  options = options || {};\n  assert.optionalBool(options.onceNext, 'options.onceNext');\n  assert.optionalBool(options.strictNext, 'options.strictNext');\n  this.onceNext = !!options.onceNext;\n  this.strictNext = !!options.strictNext; // strictNext next enforces onceNext\n\n  if (this.strictNext) {\n    this.onceNext = true;\n  }\n\n  this._stack = [];\n  this._once = this.strictNext === false ? once : once.strict;\n}\n/**\n * Public methods.\n * @private\n */\n\n/**\n * Get handlers of a chain instance\n *\n * @memberof Chain\n * @instance\n * @returns {Function[]} handlers\n */\n\n\nChain.prototype.getHandlers = function getHandlers() {\n  return this._stack;\n};\n/**\n * Utilize the given middleware `handler`\n *\n * @public\n * @memberof Chain\n * @instance\n * @param {Function} handler - handler\n * @returns {undefined} no return value\n */\n\n\nChain.prototype.add = function add(handler) {\n  // _name is assigned in the server and router\n  handler._name = handler._name || handler.name; // add the middleware\n\n  this._stack.push(handler);\n};\n/**\n * Returns the number of handlers\n *\n * @public\n * @memberof Chain\n * @instance\n * @returns {Number} number of handlers in the stack\n */\n\n\nChain.prototype.count = function count() {\n  return this._stack.length;\n};\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @public\n * @memberof Chain\n * @instance\n * @param {Request} req - request\n * @param {Response} res - response\n * @param {Function} done - final handler\n * @returns {undefined} no return value\n */\n\n\nChain.prototype.run = function run(req, res, done) {\n  var self = this;\n  var index = 0;\n\n  function next(err) {\n    // next callback\n    var handler = self._stack[index++]; // all done or request closed\n\n    if (!handler || req.closed()) {\n      setImmediate(done, err, req, res);\n      return;\n    } // call the handler\n\n\n    call(handler, err, req, res, self.onceNext ? self._once(next) : next);\n  }\n\n  next();\n  return;\n};\n/**\n * Helper functions\n * @private\n */\n\n/**\n * Invoke a handler.\n *\n * @private\n * @param {Function} handler - handler function\n * @param {Error|false|*} err - error, abort when true value or false\n * @param {Request} req - request\n * @param {Response} res - response\n * @param {Function} _next - next handler\n * @returns {undefined} no return value\n */\n\n\nfunction call(handler, err, req, res, _next) {\n  var arity = handler.length;\n  var error = err;\n  var hasError = err === false || Boolean(err); // Meassure handler timings\n  // _name is assigned in the server and router\n\n  req._currentHandler = handler._name;\n  req.startHandlerTimer(handler._name);\n\n  function next(nextErr) {\n    req.endHandlerTimer(handler._name);\n\n    _next(nextErr, req, res);\n  }\n\n  if (hasError && arity === 4) {\n    // error-handling middleware\n    handler(err, req, res, next);\n    return;\n  } else if (!hasError && arity < 4) {\n    // request-handling middleware\n    handler(req, res, next);\n    return;\n  } // continue\n\n\n  next(error, req, res);\n  return;\n}","map":null,"metadata":{},"sourceType":"script"}