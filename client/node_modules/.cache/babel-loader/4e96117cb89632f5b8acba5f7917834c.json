{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n\nvar assert = require('assert-plus');\n\nvar mime = require('mime');\n\nvar NotAcceptableError = require('restify-errors').NotAcceptableError;\n/**\n * Parses the `Accept` header, and ensures that the server can respond to what\n * the client asked for. In almost all cases passing in `server.acceptable` is\n * all that's required, as that's an array of content types the server knows\n * how to respond to (with the formatters you've registered). If the request is\n * for a non-handled type, this plugin will return a `NotAcceptableError` (406).\n *\n * Note you can get the set of types allowed from a restify server by doing\n * `server.acceptable`.\n *\n * @public\n * @function acceptParser\n * @throws   {NotAcceptableError}\n * @param    {String[]}    accepts - array of accept types.\n * @returns  {Function}              restify handler.\n * @example\n * server.use(restify.plugins.acceptParser(server.acceptable));\n */\n\n\nfunction acceptParser(accepts) {\n  var acceptable = accepts;\n\n  if (!Array.isArray(acceptable)) {\n    acceptable = [acceptable];\n  }\n\n  assert.arrayOfString(acceptable, 'acceptable');\n  acceptable = acceptable.filter(function filter(a) {\n    return a;\n  }).map(function map(a) {\n    return a.indexOf('/') === -1 ? mime.getType(a) : a;\n  }).filter(function filter(a) {\n    return a;\n  });\n  var e = new NotAcceptableError('Server accepts: ' + acceptable.join());\n\n  function parseAccept(req, res, next) {\n    if (req.accepts(acceptable)) {\n      return next();\n    }\n\n    return next(e);\n  }\n\n  return parseAccept;\n}\n\nmodule.exports = acceptParser;","map":null,"metadata":{},"sourceType":"script"}