{"ast":null,"code":"'use strict';\n\nvar assert = require('assert-plus');\n\nvar FindMyWay = require('find-my-way');\n\nvar Chain = require('./chain');\n/**\n * Radix tree based router registry backed by `find-my-way`\n *\n * @class RouterRegistryRadix\n * @public\n * @param  {Object} options - an options object\n * @param {Object} [options.ignoreTrailingSlash] - ignore trailing slash on\n *  paths\n */\n\n\nfunction RouterRegistryRadix(options) {\n  this._findMyWay = new FindMyWay(options);\n  this._routes = {};\n}\n/**\n * Adds a route.\n *\n * @public\n * @memberof Router\n * @instance\n * @function add\n * @param    {Object} route - an route object\n * @param    {String} route.name - name of the route\n * @param    {String} route.method - HTTP method\n * @param    {String} route.path - any String accepted by\n * [find-my-way](https://github.com/delvedor/find-my-way)\n * @param    {Chain} route.chain - Chain instance\n * @returns  {Boolean} true\n */\n\n\nRouterRegistryRadix.prototype.add = function add(route) {\n  assert.object(route, 'route');\n  assert.string(route.method, 'route.method');\n  assert.string(route.path, 'path');\n  assert.ok(route.chain instanceof Chain, 'route.chain');\n\n  this._findMyWay.on(route.method, route.path, function onRoute(req, res, next) {\n    route.chain.run(req, res, next);\n  }, {\n    route: route\n  });\n\n  this._routes[route.name] = route;\n  return route;\n};\n/**\n * Removes a route.\n *\n * @public\n * @memberof RouterRegistryRadix\n * @instance\n * @function remove\n * @param    {String} name - the route name\n * @returns  {Object|undefined} removed route if found\n */\n\n\nRouterRegistryRadix.prototype.remove = function remove(name) {\n  assert.string(name, 'name'); // check for route\n\n  var route = this._routes[name];\n\n  if (!route) {\n    return undefined;\n  } // remove from registry\n\n\n  this._findMyWay.off(route.method, route.path);\n\n  delete this._routes[name];\n  return route;\n};\n/**\n * Registry for route\n *\n * @public\n * @memberof RouterRegistryRadix\n * @instance\n * @function Registry\n * @param  {String} method - method\n * @param  {String} pathname - pathname\n * @returns {Chain|undefined} handler or undefined\n */\n\n\nRouterRegistryRadix.prototype.lookup = function lookup(method, pathname) {\n  assert.string(method, 'method');\n  assert.string(pathname, 'pathname');\n\n  var fmwRoute = this._findMyWay.find(method, pathname); // Not found\n\n\n  if (!fmwRoute) {\n    return undefined;\n  } // Call handler chain\n\n\n  return {\n    route: fmwRoute.store.route,\n    params: fmwRoute.params,\n    handler: fmwRoute.handler\n  };\n};\n/**\n * Get registry\n *\n * @public\n * @memberof RouterRegistryRadix\n * @instance\n * @function toString\n * @returns  {String} stringified RouterRegistryRadix\n */\n\n\nRouterRegistryRadix.prototype.get = function get() {\n  return this._routes;\n};\n/**\n * toString() serialization.\n *\n * @public\n * @memberof RouterRegistryRadix\n * @instance\n * @function toString\n * @returns  {String} stringified RouterRegistryRadix\n */\n\n\nRouterRegistryRadix.prototype.toString = function toString() {\n  return this._findMyWay.prettyPrint();\n};\n\nmodule.exports = RouterRegistryRadix;","map":null,"metadata":{},"sourceType":"script"}