{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n\nvar assert = require('assert-plus');\n\nvar querystring = require('qs');\n\nvar bodyReader = require('./bodyReader');\n\nvar errors = require('restify-errors'); ///--- Globals\n\n\nvar MIME_TYPE = 'application/x-www-form-urlencoded'; ///--- API\n\n/**\n * Returns a plugin that will parse the HTTP request body IFF the\n * contentType is application/x-www-form-urlencoded.\n *\n * If req.params already contains a given key, that key is skipped and an\n * error is logged.\n *\n * @public\n * @function urlEncodedBodyParser\n * @param   {Object}    options - an option sobject\n * @returns {Function} Handler\n */\n\nfunction urlEncodedBodyParser(options) {\n  var opts = options || {};\n  assert.object(opts, 'opts');\n  var override = opts.overrideParams;\n\n  function parseUrlEncodedBody(req, res, next) {\n    // save original body on req.rawBody and req._body\n    req.rawBody = req._body = req.body;\n\n    if (req.getContentType() !== MIME_TYPE || !req.body) {\n      next();\n      return;\n    }\n\n    try {\n      var params = querystring.parse(req.body);\n\n      if (opts.mapParams === true) {\n        var keys = Object.keys(params);\n        keys.forEach(function forEach(k) {\n          var p = req.params[k];\n\n          if (p && !override) {\n            return;\n          }\n\n          req.params[k] = params[k];\n        });\n      }\n\n      req.body = params;\n    } catch (e) {\n      next(new errors.InvalidContentError(e.message));\n      return;\n    }\n\n    req.log.trace('req.params now: %j', req.params);\n    next();\n  }\n\n  var chain = [];\n\n  if (!opts.bodyReader) {\n    chain.push(bodyReader(opts));\n  }\n\n  chain.push(parseUrlEncodedBody);\n  return chain;\n}\n\nmodule.exports = urlEncodedBodyParser;","map":null,"metadata":{},"sourceType":"script"}