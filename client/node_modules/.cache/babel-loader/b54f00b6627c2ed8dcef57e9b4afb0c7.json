{"ast":null,"code":"var hasProp = Object.prototype.hasOwnProperty;\n\nfunction throwsMessage(err) {\n  return '[Throws: ' + (err ? err.message : '?') + ']';\n}\n\nfunction safeGetValueFromPropertyOnObject(obj, property) {\n  if (hasProp.call(obj, property)) {\n    try {\n      return obj[property];\n    } catch (err) {\n      return throwsMessage(err);\n    }\n  }\n\n  return obj[property];\n}\n\nfunction ensureProperties(obj) {\n  var seen = []; // store references to objects we have seen before\n\n  function visit(obj) {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (seen.indexOf(obj) !== -1) {\n      return '[Circular]';\n    }\n\n    seen.push(obj);\n\n    if (typeof obj.toJSON === 'function') {\n      try {\n        var fResult = visit(obj.toJSON());\n        seen.pop();\n        return fResult;\n      } catch (err) {\n        return throwsMessage(err);\n      }\n    }\n\n    if (Array.isArray(obj)) {\n      var aResult = obj.map(visit);\n      seen.pop();\n      return aResult;\n    }\n\n    var result = Object.keys(obj).reduce(function (result, prop) {\n      // prevent faulty defined getter properties\n      result[prop] = visit(safeGetValueFromPropertyOnObject(obj, prop));\n      return result;\n    }, {});\n    seen.pop();\n    return result;\n  }\n\n  ;\n  return visit(obj);\n}\n\nmodule.exports = function (data, replacer, space) {\n  return JSON.stringify(ensureProperties(data), replacer, space);\n};\n\nmodule.exports.ensureProperties = ensureProperties;","map":null,"metadata":{},"sourceType":"script"}