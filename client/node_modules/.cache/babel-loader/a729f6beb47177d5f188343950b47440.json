{"ast":null,"code":"'use strict';\n\nvar errors = require('restify-errors');\n\nvar _ = require('lodash');\n\nvar assert = require('assert-plus');\n\nvar semver = require('semver');\n\nvar Negotiator = require('negotiator');\n\nvar Chain = require('../chain'); ///--- Globals\n\n\nvar InvalidVersionError = errors.InvalidVersionError;\nvar UnsupportedMediaTypeError = errors.UnsupportedMediaTypeError;\nvar DEF_CT = 'application/octet-stream'; ///--- Exports\n\n/**\n * Runs first handler that matches to the condition\n *\n * @public\n * @function conditionalHandler\n * @param {Object|Object[]} candidates - candidates\n * @param {Function|Function[]} candidates.handler - handler(s)\n * @param {String|String[]} [candidates.version] - '1.1.0', ['1.1.0', '1.2.0']\n * @param {String} [candidates.contentType] - accepted content type, '*\\/json'\n * @returns  {Function} Handler\n * @throws {InvalidVersionError}\n * @throws {UnsupportedMediaTypeError}\n * @example\n * server.use(restify.plugins.conditionalHandler({\n *    contentType: 'application/json',\n *    version: '1.0.0',\n *    handler: function (req, res, next) {\n *        next();\n *    })\n * });\n *\n * server.get('/hello/:name', restify.plugins.conditionalHandler([\n *   {\n *      version: '1.0.0',\n *      handler: function(req, res, next) { res.send('1.x'); }\n *   },\n *   {\n *      version: ['1.5.0', '2.0.0'],\n *      handler: function(req, res, next) { res.send('1.5.x, 2.x'); }\n *   },\n *   {\n *      version: '3.0.0',\n *      contentType: ['text/html', 'text/html']\n *      handler: function(req, res, next) { res.send('3.x, text'); }\n *   },\n *   {\n *      version: '3.0.0',\n *      contentType: 'application/json'\n *      handler: function(req, res, next) { res.send('3.x, json'); }\n *   },\n *   // Array of handlers\n *   {\n *      version: '4.0.0',\n *      handler: [\n *          function(req, res, next) { next(); },\n *          function(req, res, next) { next(); },\n *          function(req, res, next) { res.send('4.x') }\n *      ]\n *   },\n * ]);\n * // 'accept-version': '^1.1.0' => 1.5.x, 2.x'\n * // 'accept-version': '3.x', accept: 'application/json' => '3.x, json'\n */\n\nfunction conditionalHandler(candidates) {\n  var isVersioned = false;\n  var isContentTyped = false;\n\n  if (!_.isArray(candidates)) {\n    candidates = [candidates];\n  } // Assert\n\n\n  assert.arrayOfObject(candidates, 'candidates');\n  candidates = candidates.map(function map(candidate) {\n    // Array of handlers, convert to chain\n    if (_.isArray(candidate.handler)) {\n      var chain = new Chain();\n      candidate.handler.forEach(function forEach(_handler) {\n        assert.func(_handler);\n        chain.add(_handler);\n      });\n      candidate.handler = chain.run.bind(chain);\n    }\n\n    assert.func(candidate.handler);\n\n    if (_.isString(candidate.version)) {\n      candidate.version = [candidate.version];\n    }\n\n    if (_.isString(candidate.contentType)) {\n      candidate.contentType = [candidate.contentType];\n    }\n\n    assert.optionalArrayOfString(candidate.version);\n    assert.optionalArrayOfString(candidate.contentType);\n    isVersioned = isVersioned || !!candidate.version;\n    isContentTyped = isContentTyped || !!candidate.contentType;\n    return candidate;\n  });\n  /**\n   * Conditional Handler\n   *\n   * @private\n   * @param  {Request}  req - request\n   * @param  {Response} res - response\n   * @param  {Function} next - next\n   * @returns {undefined} no return value\n   */\n\n  return function _conditionalHandlerFactory(req, res, next) {\n    var contentType = req.headers.accept || DEF_CT;\n    var reqCandidates = candidates; // Content Type\n\n    if (isContentTyped) {\n      var contentTypes = contentType.split(/\\s*,\\s*/);\n      reqCandidates = candidates.filter(function filter(candidate) {\n        var neg = new Negotiator({\n          headers: {\n            accept: candidate.contentType.join(', ')\n          }\n        });\n        var tmp = neg.preferredMediaType(contentTypes);\n        return tmp && tmp.length;\n      });\n\n      if (!reqCandidates.length) {\n        next(new UnsupportedMediaTypeError(contentType));\n        return;\n      }\n    } // Accept Version\n\n\n    if (isVersioned) {\n      var reqVersion = req.version();\n      var maxVersion;\n      var maxVersionIndex;\n      reqCandidates.forEach(function forEach(candidate, idx) {\n        var version = semver.maxSatisfying(candidate.version, reqVersion);\n\n        if (version) {\n          if (!maxVersion || semver.gt(version, maxVersion)) {\n            maxVersion = version;\n            maxVersionIndex = idx;\n          }\n        }\n      }); // No version find\n\n      if (_.isUndefined(maxVersionIndex)) {\n        next(new InvalidVersionError('%s is not supported by %s %s', req.version() || '?', req.method, req.path()));\n        return;\n      } // Add api-version response header\n\n\n      res.header('api-version', maxVersion); // Store matched version on request internal\n\n      req._matchedVersion = maxVersion; // Run handler\n\n      reqCandidates[maxVersionIndex].handler(req, res, next);\n      return;\n    } // When not versioned\n\n\n    reqCandidates[0].handler(req, res, next);\n  };\n}\n\nmodule.exports = conditionalHandler;","map":null,"metadata":{},"sourceType":"script"}