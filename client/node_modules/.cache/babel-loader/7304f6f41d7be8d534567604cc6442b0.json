{"ast":null,"code":"/*\noauth2TokenParser - Parser oauth2 tokens from the authorization header\nor BODY of the request\n\nIf parsing from the BODY there is adependency on the bodyParser plugin:\n\nserver.use(plugins.bodyParser());\nserver.use(plugins.oauth2TokenParser());\n\n\n*/\n'use strict';\n\nvar errors = require('restify-errors');\n/*\n\n  Parses the header for the authorization: bearer\n\n*/\n\n\nfunction parseHeader(req) {\n  if (req.headers && req.headers.authorization) {\n    var credentialsIndex = 1;\n    var parts = req.headers.authorization.split(' ');\n    var partsExpectedLength = 2;\n    var schemeIndex = 0;\n\n    if (parts.length === partsExpectedLength) {\n      var credentials = parts[credentialsIndex];\n      var scheme = parts[schemeIndex];\n\n      if (/^Bearer$/i.test(scheme)) {\n        return credentials;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * Returns a plugin that will parse the client's request for an OAUTH2\n   access token\n *\n * Subsequent handlers will see `req.oauth2`, which looks like:\n *\n * ```js\n * {\n *   oauth2: {\n        accessToken: 'mF_9.B5f-4.1JqM&p=q'\n    }\n * }\n * ```\n *\n * @public\n * @function oauth2TokenParser\n * @throws   {InvalidArgumentError}\n * @param    {Object} options - an options object\n * @returns  {Function} Handler\n */\n\n\nfunction oauth2TokenParser(options) {\n  function parseOauth2Token(req, res, next) {\n    req.oauth2 = {\n      accessToken: null\n    };\n    var tokenFromHeader = parseHeader(req);\n\n    if (tokenFromHeader) {\n      req.oauth2.accessToken = tokenFromHeader;\n    }\n\n    var tokenFromBody = null;\n\n    if (typeof req.body === 'object') {\n      tokenFromBody = req.body.access_token;\n    } // more than one method to transmit the token in each request\n    // is not allowed - return 400\n\n\n    if (tokenFromBody && tokenFromHeader) {\n      // eslint-disable-next-line new-cap\n      return next(new errors.makeErrFromCode(400, 'multiple tokens disallowed'));\n    }\n\n    if (tokenFromBody && req.contentType().toLowerCase() === 'application/x-www-form-urlencoded') {\n      req.oauth2.accessToken = tokenFromBody;\n    }\n\n    return next();\n  }\n\n  return parseOauth2Token;\n}\n\nmodule.exports = oauth2TokenParser;","map":null,"metadata":{},"sourceType":"script"}