{"ast":null,"code":"'use strict';\n\nvar BadRequestError = require('restify-errors').BadRequestError;\n\nvar assert = require('assert-plus'); ///--- API\n\n/**\n * Prevents `req.urls` non-strict key-value query params\n *\n * The Request-URI is transmitted in the format specified in section 3.2.1.\n * If the Request-URI is encoded using the \"% HEX HEX\" encoding [42],\n * the origin server MUST decode the Request-URI\n * in order to properly interpret the request.\n * Servers SHOULD respond to invalid Request-URIs\n * with an appropriate status code.\n *\n * part of Hypertext Transfer Protocol -- HTTP/1.1 | 5.1.2 Request-URI\n * RFC 2616 Fielding, et al.\n *\n * @public\n * @function strictQueryParams\n * @param    {Object}   [options] - an options object\n * @param    {String}   [options.message] - a custom error message\n *                              default value:\n *                              \"Url query params does not meet strict format\"\n * @returns  {Function} Handler\n */\n\n\nfunction strictQueryParams(options) {\n  var opts = options || {};\n  assert.optionalObject(opts, 'options');\n  assert.optionalString(opts.message, 'options.message');\n\n  function _strictQueryParams(req, res, next) {\n    var keyValQParams = !/(\\&(?!(\\w+=\\w+)))/.test(req.url);\n\n    if (!keyValQParams) {\n      var msg = opts.message ? opts.message : 'Url query params does not meet strict format';\n      return next(new BadRequestError(msg));\n    }\n\n    return next();\n  }\n\n  return _strictQueryParams;\n} ///--- Exports\n\n\nmodule.exports = strictQueryParams;","map":null,"metadata":{},"sourceType":"script"}