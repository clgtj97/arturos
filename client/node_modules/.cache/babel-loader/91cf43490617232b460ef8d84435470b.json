{"ast":null,"code":"'use strict'; // NOTE: Mostly copy paste from node\n\nexports.writeHead = function writeHead(statusCode, reason, obj) {\n  var headers;\n\n  if (typeof reason === 'string') {\n    // writeHead(statusCode, reasonPhrase[, headers])\n    this.statusMessage = reason;\n  } else {\n    // writeHead(statusCode[, headers])\n    this.statusMessage = this.statusMessage || 'unknown';\n    obj = reason;\n  }\n\n  this.statusCode = statusCode;\n\n  if (this._headers) {\n    // Slow-case: when progressive API and header fields are passed.\n    if (obj) {\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n        if (k) this.setHeader(k, obj[k]);\n      }\n    } // only progressive api is used\n\n\n    headers = this._renderHeaders();\n  } else {\n    // only writeHead() called\n    headers = obj;\n  }\n\n  if (statusCode === 204 || statusCode === 304 || statusCode >= 100 && statusCode <= 199) {\n    // RFC 2616, 10.2.5:\n    // The 204 response MUST NOT include a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.3.5:\n    // The 304 response MUST NOT contain a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.1 Informational 1xx:\n    // This class of status code indicates a provisional response,\n    // consisting only of the Status-Line and optional headers, and is\n    // terminated by an empty line.\n    this._hasBody = false;\n  } // don't keep alive connections where the client expects 100 Continue\n  // but we sent a final status; they may put extra bytes on the wire.\n\n\n  if (this._expect_continue && !this._sent100) {\n    this.shouldKeepAlive = false;\n  } // Implicit headers sent!\n\n\n  this._header = true;\n  this._headerSent = true;\n\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(this.statusCode, headers);\n  }\n};\n\nexports.end = function end(data, encoding, callback) {\n  if (!this._headerSent) {\n    this.writeHead(this.statusCode);\n  }\n\n  if (!this.socket._handle) {\n    return;\n  } // Compatibility with Node.js core\n\n\n  this.finished = true;\n  var self = this;\n  var handle = this.socket._handle;\n  handle._spdyState.ending = true;\n  this.socket.end(data, encoding, function () {\n    self.constructor.prototype.end.call(self, '', 'utf8', callback);\n  });\n};\n\nexports.push = function push(path, headers, callback) {\n  var frame = {\n    path: path,\n    method: headers.method ? headers.method.toString() : 'GET',\n    status: headers.status ? parseInt(headers.status, 10) : 200,\n    host: this._req.headers.host,\n    headers: headers.request,\n    response: headers.response\n  };\n  var stream = this.spdyStream;\n  return stream.pushPromise(frame, callback);\n};\n\nexports.writeContinue = function writeContinue(callback) {\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(100, {}, callback);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}