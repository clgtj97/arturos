{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar assert = require('assert-plus');\n\nvar verror = require('verror');\n\nvar bunyanSerializer = require('./serializer');\n\nvar helpers = require('./helpers');\n\nvar HttpError = require('./baseClasses/HttpError');\n\nvar RestError = require('./baseClasses/RestError');\n\nvar httpErrors = require('./httpErrors');\n\nvar restErrors = require('./restErrors');\n\nvar makeConstructor = require('./makeConstructor');\n/**\n * create an error object from an http status code.\n * first arg is status code, all subsequent args\n * passed on to the constructor. only works for regular\n * HttpErrors, not RestErrors.\n * @public\n * @function makeErrFromCode\n * @param    {Number} statusCode the http status code\n * @returns  {Error}             an error instance\n */\n\n\nfunction makeErrFromCode(statusCode) {\n  // assert!\n  assert.number(statusCode, 'statusCode');\n  assert.equal(statusCode >= 400, true); // drop the first arg\n\n  var args = _.drop(_.toArray(arguments));\n\n  var name = helpers.errNameFromCode(statusCode);\n  var ErrCtor = httpErrors[name]; // assert constructor was found\n\n  assert.func(ErrCtor); // pass every other arg down to constructor\n\n  return makeInstance(ErrCtor, makeErrFromCode, args);\n}\n/**\n * helper function to dynamically apply args\n * to a dynamic constructor. magicks.\n * @private\n * @function makeInstance\n * @param    {Function} constructor    the constructor function\n * @param    {Function} constructorOpt where to start the error stack trace\n * @param    {Array}    args           array of arguments to apply to ctor\n * @returns  {Object}                  instance of the ctor\n */\n\n\nfunction makeInstance(constructor, constructorOpt, args) {\n  // pass args to the constructor\n  function F() {\n    // eslint-disable-line require-jsdoc\n    return constructor.apply(this, args);\n  }\n\n  F.prototype = constructor.prototype; // new up an instance, and capture stack trace from the\n  // passed in constructorOpt\n\n  var errInstance = new F();\n  Error.captureStackTrace(errInstance, constructorOpt); // return the error instance\n\n  return errInstance;\n}\n\nmodule.exports = _.assign({}, httpErrors, restErrors, verror, {\n  // export base classes\n  HttpError: HttpError,\n  RestError: RestError,\n  // export convenience functions\n  makeConstructor: makeConstructor,\n  makeErrFromCode: makeErrFromCode,\n  // deprecated method names, how long do we keep these for?\n  // restify has already been updated, but what about external consumers?\n  codeToHttpError: makeErrFromCode,\n  // built in bunyan serializer\n  bunyanSerializer: bunyanSerializer\n});","map":null,"metadata":{},"sourceType":"script"}