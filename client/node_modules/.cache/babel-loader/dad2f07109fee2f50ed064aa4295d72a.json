{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n\nvar assert = require('assert-plus');\n\nvar errors = require('restify-errors'); ///--- Globals\n\n\nvar InvalidHeaderError = errors.InvalidHeaderError;\nvar RequestExpiredError = errors.RequestExpiredError;\nvar BAD_MSG = 'Date header is invalid';\nvar OLD_MSG = 'Date header %s is too old'; ///--- API\n\n/**\n * Parses out the HTTP Date header (if present) and checks for clock skew.\n * If the header is invalid, a `InvalidHeaderError` (`400`) is returned.\n * If the clock skew exceeds the specified value,\n * a `RequestExpiredError` (`400`) is returned.\n * Where expired means the request originated at a time\n * before (`$now - $clockSkew`).\n * The default clockSkew allowance is 5m (thanks\n * Kerberos!)\n *\n * @public\n * @function dateParser\n * @throws   {RequestExpiredError}\n * @throws   {InvalidHeaderError}\n * @param    {Number}    [clockSkew=300] - allowed clock skew in seconds.\n * @returns  {Function}                    restify handler.\n * @example\n * // Allows clock skew of 1m\n * server.use(restify.plugins.dateParser(60));\n */\n\nfunction dateParser(clockSkew) {\n  var normalizedClockSkew = clockSkew || 300;\n  assert.number(normalizedClockSkew, 'normalizedClockSkew');\n  normalizedClockSkew = normalizedClockSkew * 1000;\n\n  function parseDate(req, res, next) {\n    if (!req.headers.date) {\n      return next();\n    }\n\n    var e;\n    var date = req.headers.date;\n    var log = req.log;\n\n    try {\n      var now = Date.now();\n      var sent = new Date(date).getTime();\n\n      if (log.trace()) {\n        log.trace({\n          allowedSkew: normalizedClockSkew,\n          now: now,\n          sent: sent\n        }, 'Checking clock skew');\n      }\n\n      if (now - sent > normalizedClockSkew) {\n        e = new RequestExpiredError(OLD_MSG, date);\n        return next(e);\n      }\n    } catch (err) {\n      log.trace({\n        err: err\n      }, 'Bad Date header: %s', date);\n      e = new InvalidHeaderError(BAD_MSG, date);\n      return next(e);\n    }\n\n    return next();\n  }\n\n  return parseDate;\n}\n\nmodule.exports = dateParser;","map":null,"metadata":{},"sourceType":"script"}