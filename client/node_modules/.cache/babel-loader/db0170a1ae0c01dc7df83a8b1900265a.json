{"ast":null,"code":"'use strict';\n\nvar assert = require('assert-plus');\n\nvar ServiceUnavailableError = require('restify-errors').ServiceUnavailableError;\n/**\n * The `inflightRequestThrottle` module allows you to specify an upper limit to\n * the maximum number of inflight requests your server is able to handle. This\n * is a simple heuristic for protecting against event loop contention between\n * requests causing unacceptable latencies.\n *\n * The custom error is optional, and allows you to specify your own response\n * and status code when rejecting incoming requests due to too many inflight\n * requests. It defaults to `503 ServiceUnavailableError`.\n *\n * This plugin should be registered as early as possibly in the middleware stack\n * using `pre` to avoid performing unnecessary work.\n *\n * @public\n * @function inflightRequestThrottle\n * @param {Object} opts - configure this plugin\n * @param {Number} opts.limit - maximum number of inflight requests the server\n *    will handle before returning an error\n * @param {Error} opts.err - A restify error used as a response when the\n *    inflight request limit is exceeded\n * @param {Function} opts.server - the instance of the restify server this\n *    plugin will throttle.\n * @returns {Function} middleware to be registered on server.pre\n * @example\n * var errors = require('restify-errors');\n * var restify = require('restify');\n *\n * var server = restify.createServer();\n * const options = { limit: 600, server: server };\n * options.res = new errors.InternalServerError();\n * server.pre(restify.plugins.inflightRequestThrottle(options));\n */\n\n\nfunction inflightRequestThrottle(opts) {\n  // Scrub input and populate our configuration\n  assert.object(opts, 'opts');\n  assert.number(opts.limit, 'opts.limit');\n  assert.object(opts.server, 'opts.server');\n  assert.func(opts.server.inflightRequests, 'opts.server.inflightRequests');\n\n  if (opts.err !== undefined && opts.err !== null) {\n    assert.ok(opts.err instanceof Error, 'opts.err must be an error');\n    assert.optionalNumber(opts.err.statusCode, 'opts.err.statusCode');\n  }\n\n  var plugin = {};\n  plugin._err = opts.err || new ServiceUnavailableError('resource exhausted');\n  plugin._limit = opts.limit;\n  plugin._server = opts.server;\n\n  function onRequest(req, res, next) {\n    var inflightRequests = plugin._server.inflightRequests();\n\n    if (inflightRequests > plugin._limit) {\n      req.log.trace({\n        plugin: 'inflightRequestThrottle',\n        inflightRequests: inflightRequests,\n        limit: plugin._limit\n      }, 'maximum inflight requests exceeded, rejecting request');\n      return next(plugin._err);\n    }\n\n    return next();\n  }\n\n  return onRequest;\n}\n\nmodule.exports = inflightRequestThrottle;","map":null,"metadata":{},"sourceType":"script"}