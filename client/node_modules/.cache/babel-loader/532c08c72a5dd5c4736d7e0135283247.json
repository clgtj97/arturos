{"ast":null,"code":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n'use strict';\n\nvar zlib = require('zlib');\n\nvar assert = require('assert-plus');\n/**\n * @private\n * @function _writeHead\n * @param   {Function}  originalFunction - originalFunction\n * @returns {undefined} no return value\n */\n\n\nfunction _writeHead(originalFunction) {\n  this.removeHeader('Content-Length');\n  var argsLength = arguments.length;\n  var args = new Array(argsLength - 1);\n\n  for (var i = 1; i < argsLength; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  originalFunction.apply(this, args);\n} ///--- API\n\n/**\n * If the client sends an `accept-encoding: gzip` header (or one with an\n * appropriate q-val), then the server will automatically gzip all\n * response data.\n * Note that only `gzip` is supported, as this is most widely supported by\n * clients in the wild.\n * This plugin will overwrite some of the internal streams, so any\n * calls to `res.send`, `res.write`, etc., will be compressed.  A side effect is\n * that the `content-length` header cannot be known, and so\n * `transfer-encoding: chunked` will *always* be set when this is in effect.\n * This plugin has no impact if the client does not send\n * `accept-encoding: gzip`.\n *\n * https://github.com/restify/node-restify/issues/284\n *\n * @public\n * @function gzipResponse\n * @param   {Object}   [opts] - an options object, see: zlib.createGzip\n * @returns {Function} Handler\n * @example\n * server.use(restify.plugins.gzipResponse());\n */\n\n\nfunction gzipResponse(opts) {\n  assert.optionalObject(opts, 'options');\n\n  function gzip(req, res, next) {\n    if (!req.acceptsEncoding('gzip')) {\n      next();\n      return;\n    }\n\n    var gz = zlib.createGzip(opts);\n    gz.on('data', res.write.bind(res));\n    gz.once('end', res.end.bind(res));\n    gz.on('drain', res.emit.bind(res, 'drain'));\n    var origWrite = res.write;\n    var origEnd = res.end;\n    var origWriteHead = res.writeHead;\n\n    res.handledGzip = function _handledGzip() {\n      res.write = origWrite;\n      res.end = origEnd;\n      res.writeHead = origWriteHead;\n    };\n\n    res.write = gz.write.bind(gz);\n    res.end = gz.end.bind(gz);\n    res.writeHead = _writeHead.bind(res, res.writeHead);\n    res.setHeader('Content-Encoding', 'gzip');\n    next();\n  }\n\n  return gzip;\n} ///--- Exports\n\n\nmodule.exports = gzipResponse;","map":null,"metadata":{},"sourceType":"script"}